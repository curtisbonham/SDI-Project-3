version: '3'

services:
  frontend:
    build: ./client
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"  # Port from .env file (adjust as necessary)
    depends_on:
      - backend  # If your frontend depends on the backend, this is fine
    env_file:
      - .env  # Load environment variables from .env file
    volumes:
      - ./client:/src/app  # Mount local client directory to container
      - /src/app/node_modules  # Ensure node_modules aren't overwritten
    command: npm run dev  # Start the app in development mode

  backend:
    build: ./server
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"  # Port from .env file
    environment:
      DATABASE_URL: postgres://${USER_NAME}:${USER_PASSWORD}@db:${DATABASE_PORT}/${DATABASE_NAME}
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./server:/src/app  # Mount the local server directory to the container
      - /src/app/node_modules  # Ensure node_modules aren't overwritten
      
  db:
    restart: always
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    image: postgres
    environment:
      POSTGRES_USER: ${USER_NAME}
      POSTGRES_PASSWORD: ${USER_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_NAME} -d ${DATABASE_NAME}"]
      interval: 5s
      retries: 5
      timeout: 3s
    volumes:
      - $HOME/docker/volumes/postgres:/var/lib/postgresql/data
